{"remainingRequest":"/usr/src/app/meneki-web2/node_modules/vue-loader/lib/index.js??vue-loader-options!/usr/src/app/meneki-web2/src/views/sample.vue?vue&type=script&lang=js&","dependencies":[{"path":"/usr/src/app/meneki-web2/src/views/sample.vue","mtime":1597414000000},{"path":"/usr/src/app/meneki-web2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/meneki-web2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/src/app/meneki-web2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/src/app/meneki-web2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCiAgaW1wb3J0IHtWdWVFZGl0b3J9IGZyb20gInZ1ZTItZWRpdG9yIjsKICBpbXBvcnQgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnOwpleHBvcnQgZGVmYXVsdHsKICBuYW1lOiAnc2FtcGxlJywKICBjb21wb25lbnRzOiB7IFZ1ZUVkaXRvciB9LAogIGRhdGEoKXsKICAgICAgcmV0dXJuewogICAgICAgICAgaHRtbEZvckVkaXRvcjogIjxoMT5Tb21lIGluaXRpYWwgY29udGVudDwvaDE+IgogICAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAgIGhhbmRsZUltYWdlQWRkZWQ6IGZ1bmN0aW9uKGZpbGUsIEVkaXRvciwgY3Vyc29yTG9jYXRpb24sIHJlc2V0VXBsb2FkZXIpIHsKICAgICAgLy8gQW4gZXhhbXBsZSBvZiB1c2luZyBGb3JtRGF0YQogICAgICAvLyBOT1RFOiBZb3VyIGtleSBjb3VsZCBiZSBkaWZmZXJlbnQgc3VjaCBhczoKICAgICAgLy8gZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSkKICAgICAgY29uc29sZS5sb2coJ+eUu+WDj+a3u+S7mCcpCgogICAgICB2YXIgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTsKICAgICAgZm9ybURhdGEuYXBwZW5kKCJpbWFnZSIsIGZpbGUpOwoKICAgICAgZmlyZWJhc2Uuc3RvcmFnZSgpLnJlZihmaWxlLm5hbWUpLnB1dChmaWxlKQogICAgICAudGhlbigoc25hcHNob3QpPT57CiAgICAgICAgICBjb25zb2xlLmxvZyhzbmFwc2hvdCkKICAgICAgICAgIGZpcmViYXNlLnN0b3JhZ2UoKS5yZWYoZmlsZS5uYW1lKS5nZXREb3dubG9hZFVSTCgpCiAgICAgICAgICAudGhlbigodXJsKT0+ewogICAgICAgICAgICAgIEVkaXRvci5pbnNlcnRFbWJlZChjdXJzb3JMb2NhdGlvbiwgJ2ltYWdlJywgdXJsKQogICAgICAgICAgICAgIHJlc2V0VXBsb2FkZXIoKQogICAgICAgICAgfSkKICAgICAgfSkKICAgICAgLmNhdGNoKChlcnIpID0+IHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZQogICAgICAgIGNvbnNvbGUubG9nKGVycikKICAgICAgfSkKICB9Cn0KfQo="},{"version":3,"sources":["sample.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sample.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <vue-editor id=\"editor\" useCustomImageHandler @image-added=\"handleImageAdded\" v-model=\"htmlForEditor\"> </vue-editor>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import {VueEditor} from \"vue2-editor\";\r\n    import firebase from 'firebase';\r\n  export default{\r\n    name: 'sample',\r\n    components: { VueEditor },\r\n    data(){\r\n        return{\r\n            htmlForEditor: \"<h1>Some initial content</h1>\"\r\n        }\r\n    },\r\n    methods: {\r\n        handleImageAdded: function(file, Editor, cursorLocation, resetUploader) {\r\n        // An example of using FormData\r\n        // NOTE: Your key could be different such as:\r\n        // formData.append('file', file)\r\n        console.log('画像添付')\r\n\r\n        var formData = new FormData();\r\n        formData.append(\"image\", file);\r\n\r\n        firebase.storage().ref(file.name).put(file)\r\n        .then((snapshot)=>{\r\n            console.log(snapshot)\r\n            firebase.storage().ref(file.name).getDownloadURL()\r\n            .then((url)=>{\r\n                Editor.insertEmbed(cursorLocation, 'image', url)\r\n                resetUploader()\r\n            })\r\n        })\r\n        .catch((err) => {\r\n          // eslint-disable-next-line no-console\r\n          console.log(err)\r\n        })\r\n    }\r\n  }\r\n  }\r\n</script>"]}]}